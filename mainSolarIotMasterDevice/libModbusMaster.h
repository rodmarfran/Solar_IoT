/**
 * @file libModbusMaster.h
 * @brief Biblioteca para um mestre Modbus simplificado.
 * @details Esta biblioteca simplifica o uso de um mestre Modbus simplificado.
 * @author Rodrigo França
 * @version 1.0.0
 * @date 2023-07-02
 * @license MIT License
 */

#ifndef LIBMODBUSMASTER_H
#define LIBMODBUSMASTER_H

#include <Arduino.h>
#include <stdint.h>

/**
 * @class CModbusMaster
 * @brief Classe para utilização do mestre Modbus simplificado
 */
class CModbusMaster {
public:
  /**
   * @brief Construtor
   * @param CU8_TX_RX_CTRL_PIN Pino de controle de Tx/Rx para o RS485
   * @param CU8_KRON_MODBUS_SLAVE_ADDR Endereço Modbus do dispositivo Kron
   * @param CPX_SERIAL_MODBUS Ponteiro para Serial a ser usado pelo Modbus
   * @param CU32_SERIAL_BAUD_RATE Baud Rate do Serial para ser usado pelo Modbus
   */
  explicit CModbusMaster(const uint8_t CU8_TX_RX_CTRL_PIN, const uint8_t CU8_KRON_MODBUS_SLAVE_ADDR, HardwareSerial* const CPX_SERIAL_MODBUS, const uint32_t CU32_SERIAL_BAUD_RATE = 9600lu);

  /**
   * @brief Construtor de cópia
   * @param CX_OTHER Outro objeto da classe CModbusMaster
   */
  CModbusMaster(const CModbusMaster& CX_OTHER);

  /**
   * @brief Destrutor
   */
  ~CModbusMaster();

  /**
   * @brief Inicializa o mestre Modbus simplificado
   */
  void begin(void);
  
  /**
   * @brief Realiza a leitura de registradores de 16-bit do dispositivo da Kron por Modbus
   * @param u16FirstRegAddr O endereço do registrador de 16-bit a ser lido
   * @return Retorna o valor do registrador como um valor raw de 16-bit
   */
  uint16_t u16GetKronRegister16bValue(uint16_t u16FirstRegAddr);
  
  /**
   * @brief Realiza a leitura de registradores de 32-bit do dispositivo da Kron por Modbus
   * @param u16FirstRegAddr O endereço do registrador de 32-bit a ser lido
   * @return Retorna o valor do registrador como um valor raw de 32-bit
   */
  uint32_t u32GetKronRegister32bValue(uint16_t u16FirstRegAddr);
  
  /**
   * @brief Realiza a leitura de registradores de IEEE 32-bit float do dispositivo da Kron por Modbus
   * @param u16FirstRegAddr O endereço do registrador de IEEE 32-bit float a ser lido
   * @return Retorna o valor do registrador como um valor raw de IEEE 32-bit float
   */
  float fGetKronRegisterIeee32bFpValue(uint16_t u16FirstRegAddr);

private:
  /**
   * @brief Calcula o CRC16 para o Modbus
   * @param pu8Message Ponteiro para a mensagem da qual o CRC16 será calculado
   * @param u16DataLen Comprimento dos dados na mensagem
   * @return Retorna o valor calculado do CRC16
   */
  uint16_t _u16CalculateModbusCrc16(uint8_t *pu8Message, uint16_t u16DataLen);
	
  /**
   * @brief Cria um data frame para o Modbus
   * @param u8SlaveAddr Endereço do escravo Modbus
   * @param u8FunctionCode Código de função Modbus
   * @param u16FirstRegAddr Endereço do primeiro registro
   * @param u16AmountOfReg Quantidade de registros
   */	
  void _createDataFrame(uint8_t u8SlaveAddr, uint8_t u8FunctionCode, uint16_t u16FirstRegAddr, uint16_t u16AmountOfReg);

  /**
   * @brief Realiza o envio de um dataframe e a recepção de raw data do dispositivo da Kron por Modbus
   * @param pu8DataFrameBuffer Ponteiro para o buffer do Data Frame a ser transmitido para dispositivo da Kron por Modbus
   * @param u8DataFrameSize Tamanho do Data Frame a ser transmitido para dispositivo da Kron por Modbus
   * @param pu8RawDataBuffer Ponteiro para o buffer de Raw Data a ser recebido pelo dispositivo da Kron por Modbus
   * @param u8RawDataSize  Tamanho do Raw Data a ser recebido pelo dispositivo da Kron por Modbus
   */
  void _exchangeKronModbusData(uint8_t *pu8DataFrameBuffer, uint8_t u8DataFrameSize, uint8_t *pu8RawDataBuffer, uint8_t u8RawDataSize);

  typedef union BytesTo16bValue {            /**< Typedef para conversão de bytes para o um valor de 16-bit */
      uint8_t u8Bytes[2];
      uint16_t u16RawValue;
  } TBytesTo16bValue;

  typedef union BytesTo32bValue {            /**< Typedef para conversão de bytes para o um valor de 32-bit */
      uint8_t u8Bytes[4];
      uint32_t u32RawValue;
      float fIeee32Float;
  } TBytesTo32bValue;
  
  const uint8_t _CU8_MODBUS_CRC_HI[256] = {  /**< Tabela de conversão para o byte superior do CRC16 */
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
    };
  const uint8_t _CU8_MODBUS_CRC_LO[256] = {  /**< Tabela de conversão para o byte inferior do CRC16 */
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04,
    0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8,
    0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
    0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10,
    0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
    0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
    0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C,
    0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0,
    0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
    0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C,
    0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
    0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54,
    0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98,
    0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40
    };
  const uint8_t _CU8_RS485_TRANSMIT = HIGH;  /**< Valor do pino de controle para ativar a transmissão do RS485 */
  const uint8_t _CU8_RS485_RECEIVE  = LOW;   /**< Valor do pino de controle para ativar a recepção do RS485 */
  const uint8_t _CU8_TX_RX_CTRL_PIN;         /**< Pino de controle de Tx/Rx do RS485 */
  const uint8_t _CU8_KRON_MODBUS_SLAVE_ADDR; /**< Endereço Modbus do dispositivo da Kron */
  HardwareSerial* const _CPX_SERIAL_MODBUS;  /**< Ponteiro da instância da classe HardwareSerial para o serial do Modbus */
  const uint32_t _CU32_SERIAL_BAUD_RATE;     /**< Baud Rate para o serial do Modbus */
  
  uint8_t _u8DataFrameBuffer[8];             /**< Buffer para o Data Frame do Modbus */
  uint8_t _u8RawDataBuffer[32];              /**< Buffer para o Raw Data do Modbus */
};

#endif
